from time import sleep
import curses.panel
import curses.textpad
import curses
import json

FILE_PATH = '/home/nt/file.json'


def format_str(s, len_max, time_str=False):
    if not time_str:
        return s.ljust(len_max) #+ ' |'
    return s.rjust(len_max)

def draw_left_layout(main_win, task_time_pairs, task_str_w, y=0, x=0):
    for y in range(task_time_pairs+1): # +1 for last line.
        line_pos = y*2
        main_win.addstr(line_pos, x, f'{"-"*(task_str_w+1)} ')

def draw_right_layout(main_win, task_time_pairs, time_str_w, x):
    for y in range(task_time_pairs+1): # +1 for last line.
        line_pos = y*2
        main_win.addstr(line_pos, x, f'{"-"*(time_str_w+1)}')
        if y < task_time_pairs:
            main_win.addstr(line_pos+1, x-1, '|')

def insert_txt_task_time_wins(task_lt, time_lt, task_win_lt, time_win_lt,
                              task_str_w, time_str_w):
    for i in range(len(task_lt)):
        task_str = format_str(task_lt[i], task_str_w)
        time_str = format_str(time_lt[i], time_str_w, True)
        
        task_win = task_win_lt[i]
        time_win = time_win_lt[i]
        
        task_win.insstr(task_str)
        time_win.insstr(time_str)

        task_win.noutrefresh()
        time_win.noutrefresh()

def init_task_time_wins(main_win, task_time_dt, task_str_w,
                        time_str_w):
    # +1 pattern for strs on windows/wins.
    task_lt = []; time_lt = []
    y = 1
    for task in task_time_dt:
        task_str = format_str(task, task_str_w)
        time_str = format_str(task_time_dt[task], time_str_w, True)

        task_win = curses.newwin(1, len(task_str), y, 0)
        time_win = curses.newwin(1, len(time_str), y, len(task_str)+3)

        task_lt.append(task_win); time_lt.append(time_win)
        y += 2
    return task_lt, time_lt

def highlight_win(win, selected=False):
    win.bkgd(' ', curses.color_pair(2) if selected else curses.color_pair(1))

def win_content(task_lt, time_lt, row, col, time_str_w):
    if col == 0:
        return task_lt[row]
    return format_str(time_lt[row], time_str_w, True)

def is_key_valid(key):
    valid_keys_normal = 'kjhl'
    valid_keys_special = [curses.KEY_UP, curses.KEY_DOWN,
                          curses.KEY_LEFT, curses.KEY_RIGHT, 10]
    if chr(key) in valid_keys_normal or key in valid_keys_special:
        return True
    return False

def task_usr_inp(main_win, win, task_lt, task_str_w, time_str_w, row, col):
    inp = key = ''
    y, x = win.getbegyx()
    win_width = win.getmaxyx()[1]
    while key != 10:
        if key == curses.KEY_BACKSPACE:
            x -= 1
            main_win.delch(y, x)
        elif key:
            if x > win_width:
                if x-win_width == 1:
                    pass
                main_win.erase()
                draw_left_layout(main_win, len(task_lt), task_str_w+(x-task_str_w))
                draw_right_layout(main_win, len(task_lt), time_str_w, x+2)
                insert_txt_task_time_wins(task_lt, time_lt, task_win_lt
                main_win.refresh()
            main_win.addstr(y, x, chr(key))
            inp += chr(key)
            x += 1
        key = main_win.getch()
    return inp
        
def modify_win_content(main_win, win, task_lt, time_lt, task_str_w, time_str_w,
                       row, col, time_win=False):
    if not time_win:
        curses.curs_set(True)
        curses.echo()
        win.erase()
        highlight_win(win, selected=True)
        win.refresh()
        inp = task_usr_inp(main_win, win, task_lt, task_str_w, time_str_w,
                           row, col)
        curses.noecho()
        curses.curs_set(False)
    else:
        pass

def get_selected_win(task_win_lt, time_win_lt, row, col):
    return task_win_lt[row] if col == 0 else time_win_lt[row]

def main(main_win):
    curses.curs_set(False)
    file = open(FILE_PATH)

    task_time_dt = json.loads(file.read())

    task_lt = list(task_time_dt)
    time_lt = list(task_time_dt.values())

    task_str_w = len(max(list(task_time_dt), key=len))
    time_str_w = len(max(list(task_time_dt.values()), key=len))

    draw_left_layout(main_win, len(task_lt), task_str_w)
    draw_right_layout(main_win, len(task_lt), time_str_w, task_str_w+2)
    main_win.refresh()

    task_win_lt, time_win_lt = init_task_time_wins(main_win, task_time_dt,
                                         task_str_w, time_str_w)

    insert_txt_task_time_wins(task_lt, time_lt, task_win_lt, time_win_lt,
                              task_str_w, time_str_w)
    curses.doupdate()

    task_win_lt[0].keypad(True)

    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
    curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLACK)


    row = col = -1
    while True:
        key = task_win_lt[0].getch()
        if (key == curses.KEY_UP or chr(key) == 'k') and row >= 0:
            row = len(task_time_dt)-1 if row == 0 else row-1
        elif (key == curses.KEY_DOWN or chr(key) == 'j') and row >= 0:
            row = 0 if row == len(task_time_dt)-1 else row+1
        elif (key  == curses.KEY_LEFT or chr(key) == 'h') and row >= 0:
            col = 1 if col == 0 else 0
        elif (key == curses.KEY_RIGHT or chr(key) == 'l') and row >= 0:
            col = 0 if col == 1 else 1
        elif (key == 10) and row >= 0: # enter.
            selected_win = get_selected_win(task_win_lt, time_win_lt, row, col)
            if col == 0:
                modify_win_content(main_win, selected_win, task_lt,
                                   time_lt, task_str_w, time_str_w, row, col)
            else:
                pass
#                modify_win_content(main_win, selected_win, task_win_lt,
#                                   task_lt, task_str_w, row, col, True)
        elif chr(key) == 'q':
            break
        else:
            if row == -1 and is_key_valid(key):
                row, col = 0, 0
                selected_win = get_selected_win(task_win_lt, time_win_lt, row,
                                                col)
                selected_win_content = win_content(task_lt, time_lt, row, col,
                                                   time_str_w)

                highlight_win(selected_win)
                
                selected_win.refresh()
                prev_selected_win = selected_win
                prev_selected_win_content = selected_win_content
            continue

        selected_win = get_selected_win(task_win_lt, time_win_lt, row, col)
        selected_win_content = win_content(task_lt, time_lt, row, col,
                                           time_str_w)
        
        highlight_win(prev_selected_win, True)
        highlight_win(selected_win)
        
        prev_selected_win.refresh()
        selected_win.refresh()

        prev_selected_win = selected_win
        prev_selected_win_content = selected_win_content

curses.wrapper(main)
